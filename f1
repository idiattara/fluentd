import org.apache.nifi.processor.io.StreamCallback
import groovy.json.JsonSlurper
import org.neo4j.driver.v1.*

def flowFile = session.get()
if (!flowFile) return

// Lire le contenu du flow file
flowFile = session.read(flowFile, { inputStream ->
    def slurper = new JsonSlurper()
    def json = slurper.parse(inputStream)

    // Assurez-vous que le JSON contient un tableau "statements"
    def statements = json.statements
    if (statements instanceof List) {
        // Configurer la connexion Neo4j
        def neo4jUri = 'bolt://localhost:7687' // Modifier l'URI de connexion
        def username = 'neo4j'
        def password = 'diattara'

        // Créer une session Neo4j
        def driver = GraphDatabase.driver(neo4jUri, AuthTokens.basic(username, password))
        def session = driver.session()

        try {
            // Exécuter chaque déclaration dans le tableau
            statements.each { statement ->
                // Exécutez ici votre opération POST vers Neo4j (Neo4j Driver)
                session.writeTransaction { tx ->
                    def result = tx.run(statement)
                    // Vérifier le code de réponse de Neo4j
                    if (result.hasNext()) {
                        def record = result.next()
                        def responseCode = record.get('http_status')
                        if (responseCode == 200) {
                            // Le POST a réussi, traitement des données de réponse ici
                        } else {
                            // Le POST a échoué avec un code de réponse différent, gérer l'erreur
                            log.error("Échec du POST avec le code de réponse : $responseCode")
                            // Vous pouvez également lancer une exception personnalisée ici si nécessaire
                        }
                    }
                }
            }
        } catch (Exception e) {
            // Capturer toute exception
            log.error("Exception lors de la communication avec Neo4j : ${e.message}")
            // Vous pouvez prendre des mesures supplémentaires ici en fonction de l'exception
        } finally {
            session.close()
            driver.close()
        }
    }
})

session.transfer(flowFile, REL_SUCCESS)
