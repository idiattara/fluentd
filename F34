[10:39, 14/01/2024] Sonko Rek: def command = "/chemin/vers/votre/script.sh"
def processBuilder = new ProcessBuilder(command)
def process = processBuilder.start()

// Récupérer la sortie du processus
def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
def line
while ((line = reader.readLine()) != null) {
    println "Sortie du script : $line"
}

// Attendre que le processus se termine
int exitCode = process.waitFor()
println "Le script s'est terminé avec le code de sortie : $exitCode"
[10:39, 14/01/2024] Sonko Rek: import java.util.concurrent.atomic.AtomicReference
import org.apache.commons.io.IOUtils

flowFile = session.get()
if (!flowFile) return

// Chemin vers le script Bash
def scriptPath = '/chemin/vers/votre/script.sh'

// Arguments pour le script Bash
def scriptArguments = ['arg1', 'arg2', 'arg3']

// Construction de la commande
def command = [scriptPath] + scriptArguments

// Exécution de la commande et récupération de la sortie
def process = command.execute()
def output = new AtomicReference<String>()
output.set(IOUtils.toString(process.inputStream))

// Attente de la fin du processus
process.waitFor()

// Écriture du résultat dans le FlowFile
flowFile = session.write(flowFile, { outputStream ->
    outputStream.write(output.get().bytes)
} as OutputStreamCall…
[10:39, 14/01/2024] Sonko Rek: def flowFile = session.get()
if (!flowFile) return

// Chemin vers le script Bash
def scriptPath = '/chemin/vers/votre/script.sh'

// Arguments pour le script Bash
def scriptArguments = ['arg1', 'arg2', 'arg3']

// Construction de la commande
def command = [scriptPath] + scriptArguments

// Exécution de la commande
def process = command.execute()

// Récupération de la sortie du processus
def output = process.text

// Attente de la fin du processus
process.waitFor()

// Écriture du résultat dans le FlowFile
flowFile = session.write(flowFile, { outputStream ->
    outputStream.write(output.bytes)
} as OutputStreamCallback)

// Transfert du FlowFile au succès
session.transfer(flowFile, REL_SUCCESS)
[10:39, 14/01/2024] Sonko Rek: def flowFile = session.get()
if (!flowFile) return

// Chemin vers le script Bash
def scriptPath = '/chemin/vers/votre/script.sh'

// Arguments pour le script Bash
def scriptArguments = ['arg1', 'arg2', 'arg3']

// Construction de la commande
def command = [scriptPath] + scriptArguments

// Exécution de la commande
def process = command.execute()

// Récupération de la sortie du processus
def output = process.text

// Attente de la fin du processus
def exitCode = process.waitFor()

// Vérification du code de sortie
if (exitCode == 0) {
    // Le script s'est exécuté avec succès
    flowFile = session.write(flowFile, { outputStream ->
        outputStream.write(output.bytes)
    } as OutputStreamCallback)

    // Transfert du FlowFile au succès
    session.transfer(flowFile, REL_SUCCESS)
} else {
    // Le script a échoué
    log.error("Le script a échoué avec le code de sortie : $exitCode")
    session.transfer(flowFile, REL_FAILURE)
}
